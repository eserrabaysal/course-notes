{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNqhMi0Lt4HxmLPExbbmltf"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HKph7pBkl2Z3","executionInfo":{"status":"ok","timestamp":1743935525687,"user_tz":-180,"elapsed":889,"user":{"displayName":"Serra BAYSAL","userId":"12641265736983223828"}},"outputId":"4b742661-bdc7-4c1d-c134-6bd20988f634"},"outputs":[{"output_type":"stream","name":"stdout","text":["Orijinal DataFrame:\n","      A    B    C  D\n","0  1.0  NaN    a  a\n","1  2.0  2.0    b  a\n","2  NaN  3.0  NaN  a\n","3  4.0  NaN    d  b\n","4  5.0  5.0    e  b\n","\n","Ortalama ile Doldurulmu≈ü DataFrame:\n","      A    B    C  D  A_ort\n","0  1.0  NaN    a  a    1.0\n","1  2.0  2.0    b  a    2.0\n","2  NaN  3.0  NaN  a    3.0\n","3  4.0  NaN    d  b    4.0\n","4  5.0  5.0    e  b    5.0\n","\n","Medyan ile Doldurulmu≈ü DataFrame:\n","      A    B    C  D  A_ort  B_med\n","0  1.0  NaN    a  a    1.0    3.0\n","1  2.0  2.0    b  a    2.0    2.0\n","2  NaN  3.0  NaN  a    3.0    3.0\n","3  4.0  NaN    d  b    4.0    3.0\n","4  5.0  5.0    e  b    5.0    5.0\n","\n","Mod ile Doldurulmu≈ü DataFrame:\n","      A    B    C  D  A_ort  B_med C_mod\n","0  1.0  NaN    a  a    1.0    3.0     a\n","1  2.0  2.0    b  a    2.0    2.0     a\n","2  NaN  3.0  NaN  a    3.0    3.0     a\n","3  4.0  NaN    d  b    4.0    3.0     b\n","4  5.0  5.0    e  b    5.0    5.0     b\n"]}],"source":["\n"," import pandas as pd\n"," import numpy as np\n"," data={'A':[1,2,np.nan,4,5],\n","       'B':[np.nan,2,3,np.nan,5],\n","       'C':['a','b',np.nan,'d','e'],\n","       'D':['a','a','a','b','b']}\n","\n","df=pd.DataFrame(data)\n","\n","print(\"Orijinal DataFrame:\\n\", df)\n","\n","# Ortalama ile doldurma\n","df[\"A_ort\"] = df[\"A\"].fillna(df[\"A\"].mean())\n","print(\"\\nOrtalama ile Doldurulmu≈ü DataFrame:\\n\", df)\n","\n","# Medyan ile doldurma\n","df[\"B_med\"] = df[\"B\"].fillna(df[\"B\"].median())\n","print(\"\\nMedyan ile Doldurulmu≈ü DataFrame:\\n\", df)\n","\n","# Mod ile doldurma\n","df[\"C_mod\"] = df[\"D\"].fillna(df[\"D\"].mode()[0])\n","print(\"\\nMod ile Doldurulmu≈ü DataFrame:\\n\", df)"]},{"cell_type":"markdown","source":["i"],"metadata":{"id":"r9Iypn8Sqd26"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","\n","data = {\n","    'A': [1,np.nan,3,np.nan,5],\n","    'B': [np.nan,2,np.nan,4,np.nan],\n","\n","}\n","import pandas as pd\n","import numpy as np\n","df = pd.DataFrame(data)\n","df[\"A_Doldur\"] = df[\"A\"].fillna(method=\"ffill\")\n","print(df)\n","df[\"B_Doldur\"] = df[\"B\"].fillna(method=\"ffill\")\n","print( df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"F0djbFtmrs2z","executionInfo":{"status":"ok","timestamp":1743936527539,"user_tz":-180,"elapsed":16,"user":{"displayName":"Serra BAYSAL","userId":"12641265736983223828"}},"outputId":"596a95cc-5109-4e6e-b5fa-58b9676f290a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["     A    B  A_Doldur\n","0  1.0  NaN       1.0\n","1  NaN  2.0       1.0\n","2  3.0  NaN       3.0\n","3  NaN  4.0       3.0\n","4  5.0  NaN       5.0\n","     A    B  A_Doldur  B_Doldur\n","0  1.0  NaN       1.0       NaN\n","1  NaN  2.0       1.0       2.0\n","2  3.0  NaN       3.0       2.0\n","3  NaN  4.0       3.0       4.0\n","4  5.0  NaN       5.0       4.0\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-3-b1bf65b13a35>:12: FutureWarning: Series.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n","  df[\"A_Doldur\"] = df[\"A\"].fillna(method=\"ffill\")\n","<ipython-input-3-b1bf65b13a35>:14: FutureWarning: Series.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n","  df[\"B_Doldur\"] = df[\"B\"].fillna(method=\"ffill\")\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from sklearn.impute import KNNImputer\n","data = {\n","    'A': [1,2,np.nan,4,5],\n","    'B': [np.nan,2,3,np.nan,5],\n","    'C':[1,2,3,4,5]}\n","\n","\n","df = pd.DataFrame(data)\n","print(df)\n","doldur=KNNImputer(n_neighbors=2)\n","df_doldur=pd.DataFrame(doldur.fit_transform(df),columns=df.columns)\n","print(df_doldur)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mmLDsLzEt7t2","executionInfo":{"status":"ok","timestamp":1743937126655,"user_tz":-180,"elapsed":1389,"user":{"displayName":"Serra BAYSAL","userId":"12641265736983223828"}},"outputId":"ae95b7d1-6b63-4a93-e4d6-b79f196a8a56"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["     A    B  C\n","0  1.0  NaN  1\n","1  2.0  2.0  2\n","2  NaN  3.0  3\n","3  4.0  NaN  4\n","4  5.0  5.0  5\n","     A    B    C\n","0  1.0  2.5  1.0\n","1  2.0  2.0  2.0\n","2  3.0  3.0  3.0\n","3  4.0  4.0  4.0\n","4  5.0  5.0  5.0\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from sklearn.linear_model import LinearRegression\n","\n","def otomatik_regresyon_doldurma(df):\n","    \"\"\"\n","    T√ºm eksik deƒüerleri, eksik oranƒ± az olandan ba≈ülayarak regresyon ile doldurur.\n","    \"\"\"\n","    df = df.copy()\n","    eksik_oranlar = df.isnull().mean().sort_values()  # Azdan √ßoƒüa\n","\n","    for hedef_sutun in eksik_oranlar.index:\n","        if df[hedef_sutun].isnull().sum() == 0:\n","            continue  # Eksik yoksa atla\n","\n","        print(f\"\\nüõ†Ô∏è '{hedef_sutun}' s√ºtunu dolduruluyor...\")\n","\n","        # Baƒüƒ±mlƒ± s√ºtunlar: diƒüer s√ºtunlardan eksik olmayanlar\n","        diger_sutunlar = df.columns.drop(hedef_sutun)\n","        doldurulabilir_sutunlar = [s for s in diger_sutunlar if df[s].isnull().sum() == 0]\n","\n","        if not doldurulabilir_sutunlar:\n","            print(f\"‚ö†Ô∏è '{hedef_sutun}' i√ßin uygun baƒüƒ±msƒ±z deƒüi≈üken yok. Atlanƒ±yor.\")\n","            continue\n","\n","        # Eƒüitim verisi (hedef ve baƒüƒ±msƒ±zlarda eksik olmayan)\n","        egitim_df = df[df[hedef_sutun].notnull()]\n","        egitim_df = egitim_df.dropna(subset=doldurulabilir_sutunlar)\n","\n","        # Tahmin verisi (hedef eksik, baƒüƒ±msƒ±zlarƒ± dolu)\n","        tahmin_df = df[df[hedef_sutun].isnull()]\n","        tahmin_df = tahmin_df.dropna(subset=doldurulabilir_sutunlar)\n","\n","        if egitim_df.empty or tahmin_df.empty:\n","            print(f\"‚ö†Ô∏è '{hedef_sutun}' i√ßin yeterli veri yok. Atlanƒ±yor.\")\n","            continue\n","\n","        # Model eƒüitimi\n","        model = LinearRegression()\n","        model.fit(egitim_df[doldurulabilir_sutunlar], egitim_df[hedef_sutun])\n","\n","        # Tahmin ve doldurma\n","        tahminler = model.predict(tahmin_df[doldurulabilir_sutunlar])\n","        df.loc[tahmin_df.index, hedef_sutun] = tahminler\n","\n","        print(f\"‚úÖ '{hedef_sutun}' s√ºtunu ba≈üarƒ±yla dolduruldu.\")\n","\n","    return df\n","\n","# √ñrnek veri\n","data = {'A': [1, 2, np.nan, 4, 5],\n","        'B': [6, np.nan, 8, 9, 10],\n","        'C': [11, 12, 13, 14, 15]}\n","df = pd.DataFrame(data)\n","\n","print(\"üßæ Orijinal DataFrame:\")\n","print(df)\n","\n","df_doldurulmus = otomatik_regresyon_doldurma(df)\n","\n","print(\"\\n‚úÖ Doldurulmu≈ü DataFrame:\")\n","print(df_doldurulmus)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uW3kSUlhwMwd","executionInfo":{"status":"ok","timestamp":1743937273747,"user_tz":-180,"elapsed":235,"user":{"displayName":"Serra BAYSAL","userId":"12641265736983223828"}},"outputId":"75cfdfa3-4b21-4cae-aeae-a1d5acb08c5b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["üßæ Orijinal DataFrame:\n","     A     B   C\n","0  1.0   6.0  11\n","1  2.0   NaN  12\n","2  NaN   8.0  13\n","3  4.0   9.0  14\n","4  5.0  10.0  15\n","\n","üõ†Ô∏è 'A' s√ºtunu dolduruluyor...\n","‚úÖ 'A' s√ºtunu ba≈üarƒ±yla dolduruldu.\n","\n","üõ†Ô∏è 'B' s√ºtunu dolduruluyor...\n","‚úÖ 'B' s√ºtunu ba≈üarƒ±yla dolduruldu.\n","\n","‚úÖ Doldurulmu≈ü DataFrame:\n","     A     B   C\n","0  1.0   6.0  11\n","1  2.0   7.0  12\n","2  3.0   8.0  13\n","3  4.0   9.0  14\n","4  5.0  10.0  15\n"]}]},{"cell_type":"code","source":["# √ñrnek DataFrame\n","data = {'ID': [1, 2, 3, 4, 5],\n","        'Ya≈ü': ['25', '30', 'otuz', '40', '45'],\n","        'Tarih': ['2023-01-01', '2023-01-02', '2023/01/03', '2023-01-04', '2023-01-05'],\n","        'Puan': [8.5, 9.0, '7.5', 6.0, 8.0]}\n","df = pd.DataFrame(data)\n","print(f\"{df}\\n\")\n","print(df.dtypes)\n","\n","df[\"Ya≈ü\"] = pd.to_numeric(df[\"Ya≈ü\"], errors=\"coerce\")\n","df[\"Puan\"] = pd.to_numeric(df[\"Puan\"], errors=\"coerce\")\n","df[\"Tarih\"] = pd.to_datetime(df[\"Tarih\"], errors=\"coerce\")\n","\n","print(df)\n","print(df.dtypes)"],"metadata":{"id":"cPkcFg0kw8dA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1743940976111,"user_tz":-180,"elapsed":55,"user":{"displayName":"Serra BAYSAL","userId":"12641265736983223828"}},"outputId":"899208cd-35fc-430b-df09-8e5c6ab5f1d5"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["   ID   Ya≈ü       Tarih Puan\n","0   1    25  2023-01-01  8.5\n","1   2    30  2023-01-02  9.0\n","2   3  otuz  2023/01/03  7.5\n","3   4    40  2023-01-04  6.0\n","4   5    45  2023-01-05  8.0\n","\n","ID        int64\n","Ya≈ü      object\n","Tarih    object\n","Puan     object\n","dtype: object\n","   ID   Ya≈ü      Tarih  Puan\n","0   1  25.0 2023-01-01   8.5\n","1   2  30.0 2023-01-02   9.0\n","2   3   NaN        NaT   7.5\n","3   4  40.0 2023-01-04   6.0\n","4   5  45.0 2023-01-05   8.0\n","ID                int64\n","Ya≈ü             float64\n","Tarih    datetime64[ns]\n","Puan            float64\n","dtype: object\n"]}]},{"cell_type":"code","source":["#Aykƒ±rƒ± deƒüer grafikleri\n","#KUTU GRAFƒ∞KLER verinin daƒüƒ±lƒ±mƒ±nƒ± kutu grafiklerle\n","#Hƒ∞STOGRAMLAR   verinin frekans daƒüƒ±lƒ±mƒ±nƒ± g√∂sterir.\n","#SA√áILIM GRAFƒ∞KLERƒ∞  ikideƒüi≈üken arasƒ±ndaki ili≈ükiyi g√∂sterir.\n","\n","\n","\n","\n"],"metadata":{"id":"gD-yfoDg-4lQ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[":Z score 2 ye olan kƒ±smƒ± tahmin ediliyor. ama 2 ve 3 daha fazlasƒ± aykƒ±rƒ± olarak\n","\n","*   \n","\n","kabul edilir.\n","IQR √ßeyrkler arasƒ± uzaklƒ±k verinin orta %50 sini\n","\n","\n","\n","*   d√∂n√º≈üt√ºrme\n","*   budama\n","*   aykƒ±rƒ± deƒüerleri veri setinden tamamen √ßƒ±karma trimming\n"],"metadata":{"id":"RwuCo9tHDzmm"}},{"cell_type":"code","source":["#Aykƒ±rƒ± Deƒüerleri Tespit Etme\n","\n","import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","from scipy import stats\n","import numpy as np\n","\n","# √ñrnek DataFrame\n","data = {'A': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20],\n","        'B': [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 100]}\n","df = pd.DataFrame(data)\n","\n","print(\"Orijinal DataFrame:\\n\", df)\n","\n","# Aykƒ±rƒ± deƒüer tespiti (kutu grafikleri)\n","plt.figure(figsize=(10, 5))\n","plt.subplot(1, 2, 1)\n","sns.boxplot(y=df['A'])\n","plt.title('A S√ºtunu Kutu Grafiƒüi')\n","\n","plt.subplot(1, 2, 2)\n","sns.boxplot(y=df['B'])\n","plt.title('B S√ºtunu Kutu Grafiƒüi')\n","plt.show()\n","\n","# Aykƒ±rƒ± deƒüer tespiti (z-skorlarƒ±)\n","z_a = np.abs(stats.zscore(df['A']))\n","z_b = np.abs(stats.zscore(df['B']))\n","print(\"\\nA S√ºtunu Z-skorlarƒ±:\\n\", z_a)\n","print(\"\\nB S√ºtunu Z-skorlarƒ±:\\n\", z_b)\n","\n","# Aykƒ±rƒ± deƒüer tespiti (IQR)\n","Q1_A = df['A'].quantile(0.25)\n","Q3_A = df['A'].quantile(0.75)\n","IQR_A = Q3_A - Q1_A\n","print(\"\\nA S√ºtunu IQR:\", IQR_A)\n","\n","Q1_B = df['B'].quantile(0.25)\n","Q3_B = df['B'].quantile(0.75)\n","IQR_B = Q3_B - Q1_B\n","print(\"\\nB S√ºtunu IQR:\", IQR_B)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"idVMETWBEsDm","executionInfo":{"status":"ok","timestamp":1743942793250,"user_tz":-180,"elapsed":1893,"user":{"displayName":"Serra BAYSAL","userId":"12641265736983223828"}},"outputId":"c8efbc80-3a2a-4ba2-fdff-ef267015867a"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Orijinal DataFrame:\n","      A    B\n","0    1   10\n","1    2   11\n","2    3   12\n","3    4   13\n","4    5   14\n","5    6   15\n","6    7   16\n","7    8   17\n","8    9   18\n","9   10   19\n","10  20  100\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x500 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","A S√ºtunu Z-skorlarƒ±:\n"," 0     1.166532\n","1     0.966034\n","2     0.765537\n","3     0.565039\n","4     0.364541\n","5     0.164044\n","6     0.036454\n","7     0.236952\n","8     0.437450\n","9     0.637947\n","10    2.642924\n","Name: A, dtype: float64\n","\n","B S√ºtunu Z-skorlarƒ±:\n"," 0     0.496236\n","1     0.455802\n","2     0.415368\n","3     0.374934\n","4     0.334500\n","5     0.294066\n","6     0.253632\n","7     0.213198\n","8     0.172764\n","9     0.132330\n","10    3.142830\n","Name: B, dtype: float64\n","\n","A S√ºtunu IQR: 5.0\n","\n","B S√ºtunu IQR: 5.0\n"]}]},{"cell_type":"code","source":["# Aykƒ±rƒ± Deƒüerleri D√∂n√º≈üt√ºrme veya Budama\n","import pandas as pd\n","import numpy as np\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","# √ñrnek DataFrame\n","data = {'C': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 50]}\n","df = pd.DataFrame(data)\n","\n","print(\"Orijinal DataFrame:\\n\", df)\n","\n","# Orijinal daƒüƒ±lƒ±m\n","plt.figure(figsize=(8, 4))\n","plt.subplot(1, 2, 1)\n","sns.histplot(df['C'], kde=True)\n","plt.title('Orijinal Daƒüƒ±lƒ±m')\n","\n","# Log d√∂n√º≈ü√ºm√º\n","df['C_log'] = df['C'].apply(np.log)\n","plt.subplot(1, 2, 2)\n","sns.histplot(df['C_log'], kde=True)\n","plt.title('Log D√∂n√º≈ü√ºm√º Sonrasƒ± Daƒüƒ±lƒ±m')\n","plt.show()\n","\n","print(\"\\nLog D√∂n√º≈ü√ºm√º Sonrasƒ± DataFrame:\\n\", df)\n","\n","# Winsorizing\n","from scipy.stats import iqr\n","\n","alt_sinir = np.percentile(df['C'], 10)\n","ust_sinir = np.percentile(df['C'], 90)\n","df['C_winsorized'] = np.clip(df['C'], alt_sinir, ust_sinir)\n","print(\"\\nWinsorized DataFrame:\\n\", df)\n","\n","# Trimming\n","df_trimmed = df[(df['C'] > alt_sinir) & (df['C'] < ust_sinir)]\n","print(\"\\nTrimmed DataFrame:\\n\", df_trimmed)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"atEIXNwNG3qf","executionInfo":{"status":"ok","timestamp":1743943079708,"user_tz":-180,"elapsed":885,"user":{"displayName":"Serra BAYSAL","userId":"12641265736983223828"}},"outputId":"fcd78479-87a7-424f-d4a1-3841addd5297"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Orijinal DataFrame:\n","      C\n","0    1\n","1    2\n","2    3\n","3    4\n","4    5\n","5    6\n","6    7\n","7    8\n","8    9\n","9   10\n","10  50\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x400 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","Log D√∂n√º≈ü√ºm√º Sonrasƒ± DataFrame:\n","      C     C_log\n","0    1  0.000000\n","1    2  0.693147\n","2    3  1.098612\n","3    4  1.386294\n","4    5  1.609438\n","5    6  1.791759\n","6    7  1.945910\n","7    8  2.079442\n","8    9  2.197225\n","9   10  2.302585\n","10  50  3.912023\n","\n","Winsorized DataFrame:\n","      C     C_log  C_winsorized\n","0    1  0.000000             2\n","1    2  0.693147             2\n","2    3  1.098612             3\n","3    4  1.386294             4\n","4    5  1.609438             5\n","5    6  1.791759             6\n","6    7  1.945910             7\n","7    8  2.079442             8\n","8    9  2.197225             9\n","9   10  2.302585            10\n","10  50  3.912023            10\n","\n","Trimmed DataFrame:\n","    C     C_log  C_winsorized\n","2  3  1.098612             3\n","3  4  1.386294             4\n","4  5  1.609438             5\n","5  6  1.791759             6\n","6  7  1.945910             7\n","7  8  2.079442             8\n","8  9  2.197225             9\n"]}]},{"cell_type":"code","source":["#Robust ƒ∞statistiksel Y√∂ntemler Kullanma\n","\n","import pandas as pd\n","import numpy as np\n","from sklearn.preprocessing import RobustScaler\n","\n","# √ñrnek DataFrame\n","data = {'D': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100]}\n","df = pd.DataFrame(data)\n","\n","print(\"Orijinal DataFrame:\\n\", df)\n","\n","# Ortalama ve Medyan Kar≈üƒ±la≈ütƒ±rma\n","ortalama = df['D'].mean()\n","medyan = df['D'].median()\n","print(\"\\nOrtalama:\", ortalama)\n","print(\"Medyan:\", medyan)\n","\n","# Standart Sapma ve IQR Kar≈üƒ±la≈ütƒ±rma\n","standart_sapma = df['D'].std()\n","Q1 = df['D'].quantile(0.25)\n","Q3 = df['D'].quantile(0.75)\n","IQR = Q3 - Q1\n","print(\"\\nStandart Sapma:\", standart_sapma)\n","print(\"IQR:\", IQR)\n","\n","# RobustScaler Uygulama\n","scaler = RobustScaler()\n","df['D_robust_scaled'] = scaler.fit_transform(df[['D']])\n","print(\"\\nRobust Scaled DataFrame:\\n\", df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AcN2YLjoITm5","executionInfo":{"status":"ok","timestamp":1743943455673,"user_tz":-180,"elapsed":41,"user":{"displayName":"Serra BAYSAL","userId":"12641265736983223828"}},"outputId":"4ed116dd-efc1-4853-efea-94534de6fa5f"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Orijinal DataFrame:\n","       D\n","0     1\n","1     2\n","2     3\n","3     4\n","4     5\n","5     6\n","6     7\n","7     8\n","8     9\n","9    10\n","10  100\n","\n","Ortalama: 14.090909090909092\n","Medyan: 6.0\n","\n","Standart Sapma: 28.637229424141385\n","IQR: 5.0\n","\n","Robust Scaled DataFrame:\n","       D  D_robust_scaled\n","0     1             -1.0\n","1     2             -0.8\n","2     3             -0.6\n","3     4             -0.4\n","4     5             -0.2\n","5     6              0.0\n","6     7              0.2\n","7     8              0.4\n","8     9              0.6\n","9    10              0.8\n","10  100             18.8\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"_r3ykGeIJIGE"},"execution_count":null,"outputs":[]}]}